module TEMPLATE_SPARE(TEMPLATE_COMMON) is
	type SSET_NAT is sorted set of NAT with "remove","inter","empty","head","member" end type

	(* Find the first available element given the arrays of failed
	 * and claimed children.
	 *)
	process SPARE [IMPOSSIBLE : none,
	               FAIL : NAT_CHANNEL,
	               ACTIVATE : NAT_BOOL_CHANNEL,
	               ONLINE : NAT_CHANNEL,
	               DEACTIVATE : NAT_BOOL_CHANNEL,
	               REPAIRED : NAT_BOOL_CHANNEL]
		(total : NAT, always_active : BOOL, repairable : BOOL) is
	var
		unfailed : SSET_NAT,
		unclaimed : SSET_NAT,
		avail : SSET_NAT,
		done : BOOL,
		repairing_deactivate : NAT,
		nr : NAT,
		using : NAT,
		prev_using : NAT, (* was using, should be deactivated *)
		activated : BOOL
	in
		done := FALSE;
		activated := FALSE;
		using := 0;
		if always_active then
			activated := TRUE;
			using := 1
		end if;
		repairing_deactivate := 0;
		prev_using := 0;
		(* Initially everything is unfailed and unclaimed *)
		unfailed := nil;
		for nr := 1 while nr <= total by nr := nr + 1 loop
			unfailed := insert(nr, unfailed)
		end loop;
		unclaimed := unfailed;
		avail := unfailed;
		loop
			select
			(*
			 * Listen for any child to fail.
			 * If this happens, we remember this by setting the
			 * boolean in the failed array to TRUE. If the failing
			 * node was the one we were currently 'using', initiate
			 * the search to find another node to use.
			 *)
				FAIL (?nr) where (0 < nr) and (nr <= total);
				unfailed := remove(nr, unfailed);
				avail := inter(unclaimed, unfailed);
				
				(* If the failing node was the one we were
				 * currently 'using', initiate the search to
				 * find another node to use.
				 *)
				if nr == using then
					prev_using := using
				end if

			[]
				if prev_using > 0 then
					DEACTIVATE(!prev_using, TRUE);
					prev_using := 0;
					using := 0
				elsif (repairing_deactivate > 0) then
					DEACTIVATE(!repairing_deactivate, TRUE);
					repairing_deactivate := 0
				elsif not(done) and empty(avail) then
			(*
			 * If the number of available nodes reaches 0, this
			 * means there are no children left to use.
			 * Thus, the Voting node fails and notifies its parents.
			 *)
					FAIL (!0 of NAT);
					done := TRUE
				end if

			(*
			 * Listen for any child to be repaired.
			 * If this happens, we remember this by setting the
			 * boolean in the failed array to FALSE.
			 *)
			 []
				ONLINE (?nr) where (0 < nr) and (nr <= total);
				if (not(repairable)) then
					IMPOSSIBLE;
					loop null end loop
				else
					unfailed := insert(nr, unfailed);
					avail := inter(unclaimed, unfailed)
				end if


			(*
			 * If we are now using a node and were previously done,
			 * that means our children have been repaired and we
			 * should notify our parent that we have been repaired
			 * as well.
			 *)
			[]
				if ((using > 0) and member(using, avail) and done) then
					ONLINE (!0 of NAT);
					done := FALSE
				end if
			
			(*
			 * If we are inactive and failed, but have
			 * usable children, we should no longer be
			 * failed.
			 *)
			[]
				if done and not(empty(avail)) and not(activated)
				then
					ONLINE (!0 of NAT);
					done := FALSE
				end if

			(*
			 * If this node is activated, enable the activation
			 * procedure.
			 *)
			[]
				ACTIVATE (!0 of NAT, FALSE);
				activated := TRUE

			[]
				DEACTIVATE (!0 of NAT, FALSE);
				if (not(always_active)) then
					prev_using := using;
					activated := FALSE
				else
					IMPOSSIBLE;
					loop null end loop
				end if
			
			(*
			 * Listen to activation commands coming from OTHER
			 * nodes, given to one of the children of THIS node.
			 * If this happens, we must remember that that child
			 * was activated. Skip the node we are currently using,
			 * because that one should NOT be listed as unavailable,
			 * as this Spare node is currently using that node.
			 *
			 * NOTE: the second argument to the ACTIVATE gate
			 * enables the ability for a node to have multiple Spare
			 * parents. The SENDER of an ACTIVATE command has the
			 * argument set to TRUE, while the RECEIVER has the
			 * argument set to FALSE.
			 *)
			[]
				ACTIVATE (?nr,FALSE)
					where ((nr > 0)
					       and (nr <= total)
					       and (nr <> using));
				if ((nr == 1) and always_active) then
					IMPOSSIBLE;
					loop null end loop
				end if;
				unclaimed := remove(nr, unclaimed);
				avail := inter(unclaimed, unfailed)

			[]
				DEACTIVATE (?nr,FALSE)
					where ((nr > 0)
					       and (nr <= total));
				if ((nr == 1) and always_active) then
					IMPOSSIBLE;
					loop null end loop
				end if;
				if (nr == prev_using) then
					IMPOSSIBLE;
					loop null end loop
				end if;
				if (nr == repairing_deactivate) then
					IMPOSSIBLE;
					loop null end loop
				end if;
				unclaimed := insert(nr, unclaimed);
				avail := inter(unclaimed, unfailed)
			
			(*
			 * If we are currently not using a node, but we are in
			 * the middle of the activation procedure, try to find
			 * another node. We do this from left to right; when we
			 * find an available node, we activate it and remember
			 * that we use this node (using).
			 *)
			[]
				if using == 0 and not(empty(avail)) then
					if (activated) then
						using := head(avail);
						ACTIVATE (!using,TRUE)
					end if;
					if repairing_deactivate == using then
						repairing_deactivate := 0
					end if
				end if

			(* Ignore any repair signals.
			 *)
			[]
				REPAIRED (?0, FALSE)

			[]
				var new_using : NAT in
					if (activated and not(empty(avail)) and (prev_using == 0) and (repairing_deactivate == 0))
					then
						new_using := head(avail);
						if (new_using <> using) then
							if ((new_using > 1) or not(always_active)) then
								ACTIVATE (!new_using,TRUE)
							end if;
							repairing_deactivate := using;
							using := new_using
						end if
					end if
				end var
			end select;

			(* Special procedure for the always-active gate
			 * since it needs to make changes without
			 * sending signals.
			 *)
			if always_active then
				if using != 1 and member(1, avail) then
					prev_using := using;
					using := 1;
					if repairing_deactivate == 1 then
						repairing_deactivate := 0
					end if
				end if;
				if prev_using == 1 then	
					prev_using := 0;
					using := 0
				end if
			end if
		end loop
	end var
	end process
end module 
