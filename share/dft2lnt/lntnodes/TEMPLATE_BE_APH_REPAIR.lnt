module TEMPLATE_BE_APH_REPAIR(TEMPLATE_COMMON_APH_REPAIR) is

	process BEproc [FAIL : NAT_CHANNEL, ACTIVATE : NAT_BOOL_CHANNEL, RATE_FAIL : NAT_NAT_CHANNEL, REPAIR : NAT_CHANNEL, REPAIRED : NAT_BOOL_CHANNEL, INSPECT : NAT_CHANNEL, INSPECTED : NAT_BOOL_CHANNEL, ONLINE : NAT_CHANNEL] (total: NAT, cold: BOOL, initial: STATUS, phases: NAT, threshold : NAT) is
	var
		status : STATUS,
		isactive : BOOL,
		degenerated : NAT
	in
		status := initial;
		if (initial == ACTIVE) then
			isactive := TRUE;
			status := UP
		else
			isactive := FALSE
		end if;
		degenerated := phases;
		loop
			select

			(*
			 * When this BE is activated, it will set the status to ACTIVE,
			 * but only if it was UP (not active and not failed and not under repair)
			 *)
			 -- have to send down signals if it can't be activated, because the component is down
				ACTIVATE (?0 of NAT, FALSE);
				isactive := TRUE

			(*
			 * When this BE is in the UP state, it can fail with the
			 * failure rate associated with this state. The rate is later
			 * introduced using renaming of RATE_FAIL !1 !1.
			 * If the failure event is triggered, go into the FAILED state.
			 *)
			[]
				if ((not (cold)) and (status == UP) and (not(isactive))) then
					RATE_FAIL (!1 of NAT,1 of NAT);
					degenerated := degenerated-1;
					if (degenerated < 1) then
						FAIL (!0 of NAT);
						status := DOWN
					end if;
					if ((phases-degenerated) == threshold) then
						INSPECT (!0 of NAT)
					end if
				end if

			(*
			 * When this BE is in the ACTIVE state, it can fail with the
			 * failure rate associated with this state. The rate is later
			 * introduced using renaming of RATE_FAIL !1 !2.
			 * If the failure event is triggered, go into the FAILED state.
			 *)
			[]
				if (isactive and (status == UP)) then
					RATE_FAIL (!1 of NAT,2 of NAT);
					degenerated := degenerated-1;
					if (degenerated < 1) then
						FAIL (!0 of NAT);
						status := DOWN
					end if;
					if ((phases-degenerated) == threshold) then
						INSPECT (!0 of NAT)
					end if
				end if

			-- listen if repair is finished active branch
			[]
				REPAIRED (?0 of NAT,FALSE);
				degenerated := phases;
				if (status == DOWN) then
					ONLINE (!0 of NAT)
				end if;
				status := UP
			end select
		end loop
	end var
	end process
end module
