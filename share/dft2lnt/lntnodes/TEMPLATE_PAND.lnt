module TEMPLATE_PAND(TEMPLATE_COMMON) is

	process PAND [IMPOSSIBLE : none, FAIL : NAT_CHANNEL,
	              ACTIVATE : NAT_BOOL_CHANNEL, ONLINE: NAT_CHANNEL]
		(total : NAT, always_active : BOOL, repairable : BOOL) is
	var
		failed : BOOL_ARRAY,
		nr_failed: NAT,
		in_order_mark : NAT,
		done : BOOL,
		nr_act : NAT
	in
		done := FALSE;
		failed := BOOL_ARRAY(FALSE);
		nr_act := 0;
		nr_failed := 0;
		in_order_mark := 0;
		loop
			select

			(*
			 * Listen for any child to be triggered.
			 *)
			var nr : NAT in
				FAIL (?nr) where (0 < nr) and (nr <= total);
				if (nr == (in_order_mark + 1)) then
					in_order_mark := nr
				end if;
				if not(failed[nr]) then
					nr_failed := nr_failed + 1
				end if;
				failed[nr] := TRUE
			end var

			(*
			 * Listen for any child to be repaired.
			 *)

			[]
			var nr : NAT in
				if repairable then
					ONLINE (?nr) where (0 < nr) and (nr <= total);
					if (nr <= in_order_mark) then
						in_order_mark := nr - 1
					end if;
					if not(failed[nr]) then
						IMPOSSIBLE; stop
					end if;
					failed[nr] := FALSE;
					nr_failed := nr_failed - 1
				end if
			end var

			(*
			 * Checks if all the children have failed and if they failed in
			 * the right order. If this is the case, the PAnd fails and
			 * notifies its parents.
			 *)
			[]
				if (in_order_mark == total) and not(done) then
					FAIL (!0 of NAT);
					done := TRUE
				end if

			[]
				if (in_order_mark < total) and done then
					ONLINE(!0 of NAT);
					done := FALSE
				end if

			(*
			 * If this node is activated, enable the activation of the source.
			 *)
			[]
				ACTIVATE (!0 of NAT, !FALSE);
				if (not(always_active)) then
					if (nr_act == 0 of NAT) then
						nr_act := 1 of NAT
					end if
				end if

			(*
			 * If the children should be activated, do so, one by one,
			 * from left to right.
			 *)
			[]
				if (nr_act > 0) then
					ACTIVATE (!nr_act,TRUE);
					if nr_act < total  then
						nr_act := nr_act + 1
					else
						nr_act := 0
					end if
				end if
			end select
		end loop
	end var
	end process
end module
