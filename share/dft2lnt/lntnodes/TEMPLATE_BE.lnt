(* Basic event with possible non-failure probability.
 * Input rates:
 * RATE_FAIL !x !1: Dormant rate from phase x (1-indexed)
 * RATE_FAIL !x !2: Active rate from phase x (1-indexed)
 * RATE_FAIL !x !3: Dormant immediate repair rate from phase x (1-indexed)
 * RATE_FAIL !x !4: Active immediate repair rate from phase x (1-indexed)
 * RATE_FAIL !0 !y: Non-fail rate from first phase (p * lambda)
 * RATE_REPAIR    : Repair rate from any failed state.
 *
 * A note on the combination of prob and repairs: A repairable BE will
 * decide once whether it can ever fail or not. A BE that has
 * determined that it can fail (by undergoing any degradation at all)
 * will never enter a failsafe state after repairs. Similarly, a
 * failsafe BE with remain failsafe after attempted repairs.
 *
 *)
module TEMPLATE_BE(TEMPLATE_COMMON_APH_REPAIR) is
	function can_failsig (cold:BOOL, isactive:BOOL, status:STATUS) : BOOL is
		return (status == UP) and (not(cold or isactive) or isactive)
	end function

	process fail_sig [RATE_FAIL : NAT_NAT_CHANNEL]
			(active:BOOL, phase:NAT, canfail:BOOL)
	is
		if (canfail and (phase == 1)) then
			if not(active) then
				select
					RATE_FAIL(!phase, 1 of NAT)
				[]
					RATE_FAIL(!0 of NAT, 1 of NAT)
				end select
			else
				select
					RATE_FAIL(!phase, 2 of NAT)
				[]
					RATE_FAIL(!0 of NAT, 2 of NAT)
				end select
			end if
		else
			if not(active) then
				RATE_FAIL(!phase, 1 of NAT)
			else
				RATE_FAIL(!phase, 2 of NAT)
			end if
		end if
	end process

	process fail_res [RATE_FAIL : NAT_NAT_CHANNEL]
			(active:BOOL, phase:NAT, canfail:BOOL)
	is
		if (canfail and (phase == 1)) then
			if not(active) then
				select
					RATE_FAIL(!phase, 3 of NAT)
				[]
					RATE_FAIL(!0 of NAT, 3 of NAT)
				end select
			else
				select
					RATE_FAIL(!phase, 4 of NAT)
				[]
					RATE_FAIL(!0 of NAT, 4 of NAT)
				end select
			end if
		else
			if not(active) then
				RATE_FAIL(!phase, 3 of NAT)
			else
				RATE_FAIL(!phase, 4 of NAT)
			end if
		end if
	end process

	process BEproc [IMPOSSIBLE : none,
	                FAIL : NAT_CHANNEL,
	                ACTIVATE : NAT_BOOL_CHANNEL,
	                RATE_FAIL : NAT_NAT_CHANNEL,
	                RATE_REPAIR : none,
	                REPAIR : BOOL_CHANNEL,
	                REPAIRED : NAT_CHANNEL,
	                REPAIRING : NAT_CHANNEL,
	                INSPECT : NAT_CHANNEL,
	                ONLINE : NAT_CHANNEL,
	                DEACTIVATE : NAT_BOOL_CHANNEL]
		(cold: BOOL, initial: STATUS, phases: NAT,
		 threshold : NAT, repairable: BOOL, self_repair: BOOL,
		 independent_repair: BOOL, always_active: BOOL)
	is var
		status : STATUS,
		isactive : BOOL,
		emit_fail : BOOL,
		emit_online : BOOL,
		emit_inspect : BOOL,
		can_definitely_fail: BOOL,
		repair_state: REPAIR_STATUS,
		phase : NAT
	in
		status := initial;
		emit_fail := FALSE;
		can_definitely_fail := FALSE;
		emit_inspect := FALSE;
		if (initial == FAILING) then
			emit_fail := TRUE;
			if (threshold >= 0 of NAT) then
				emit_inspect := TRUE
			end if;
			status := UP
		end if;
		isactive := always_active;
		phase := 1 of NAT;
		emit_online := FALSE;
		repair_state := NONE;
		loop
			select
			(* Note: Activation/deactivation logic will get
			 *       really screwy if a BE has multiple
			 *       parents that disagree about the status.
			 *)
				ACTIVATE (!0 of NAT, FALSE);
				isactive := TRUE

			[]
				DEACTIVATE (!0 of NAT, FALSE);
				if not(always_active) then
					isactive := FALSE
				else
					IMPOSSIBLE; stop
				end if

			(*
			 * When this BE is in the UP state, it can fail with
			 * the failure rate associated with this state. The
			 * rate is later introduced using renaming of
			 * RATE_FAIL !x !y. If the failure event is
			 * triggered, go into the FAILED state.
			 *)
			[]
				if can_failsig(cold, isactive, status) then
					fail_sig[RATE_FAIL](isactive, phase,
					                   can_definitely_fail);
					can_definitely_fail := TRUE;
					if (phase == phases) then
						emit_fail := TRUE;
						status := DOWN
					end if;
					if (phase == threshold) then
						emit_inspect := TRUE
					end if;
					phase := phase + 1
				end if

			(*
			 * Due to a restoration factor, the BE may
			 * `fail' back to its first phase. This
			 * nonsensical behaviour is specified by the
			 * Galileo manual, so we follow it.
			 *)
			[]
				if can_failsig(cold, isactive, status) then
					fail_res[RATE_FAIL](isactive, phase);
					can_definitely_fail := TRUE;
					phase := 1
				end if

			 (* If the BE is in the first degradation phase,
			  * and has a non-failure probability
			  * (converted to a rate), the BE might move to
			  * a failsafe state.
			  *)
			[]
				if ((not (cold))
				    and (status == UP)
				    and not(isactive)
				    and not(can_definitely_fail)
				    and (phase == 1))
				then
					select
						RATE_FAIL (!0 of NAT,1 of NAT)
						[]
						RATE_FAIL (!0 of NAT,3 of NAT)
					end select;
					status := FAILSAFE
				end if

			[]
				if (isactive
				    and (status == UP)
				    and (phase == 1)
				    and not(can_definitely_fail))
				then
					select
						RATE_FAIL (!0 of NAT,2 of NAT)
						[]
						RATE_FAIL (!0 of NAT,4 of NAT)
					end select;
					status := FAILSAFE
				end if

			[]
				if emit_inspect then
					INSPECT (!0 of NAT);
					emit_inspect := false
				end if

			[]
			(* Always emit the fail signal before a repair, to
			   avoid strange behaviour in the gates
			 *)
				if (emit_fail) then
					FAIL (!0 of NAT);
					emit_fail := FALSE
				elsif (emit_online) then
					ONLINE (!0 of NAT);
					emit_online := FALSE
				end if

			-- Decide on our own we need repairs.
			[]	if (repairable and self_repair
				    and (status == DOWN)
				    and (repair_state == NONE))
				then
					if independent_repair then
						repair_state := BUSY
					else
						repair_state := NEEDED
					end if
				end if

			-- IM tells us we need to do repairs.
			[]	REPAIR(FALSE);
				if not(repairable) then
					IMPOSSIBLE; stop
				end if;
				if (repair_state == NONE) then
					if independent_repair then
						repair_state := BUSY
					else
						repair_state := NEEDED
					end if
				end if

			-- Signal that we need repair
			[]	if (repair_state == NEEDED) then
					REPAIR(TRUE);
					repair_state := WAITING
				end if

			-- RU tells us we can start repair.
			[]	REPAIRING(0 of NAT);
				if (repair_state == WAITING) then
					repair_state := BUSY
				else
					IMPOSSIBLE; stop
				end if
			[]
				if (repair_state == BUSY) then
					RATE_REPAIR;
					phase := 1;
					if (emit_inspect) then
						IMPOSSIBLE; stop
					end if;
					repair_state := DONE;
					if (status == DOWN) then
						emit_online := TRUE
					end if;
					if (status != FAILSAFE) then
						status := UP
					end if
				end if
			[]
				if (repair_state == DONE) then
					REPAIRED(!0 of NAT);
					repair_state := NONE
				end if
			end select;

			if ((repair_state == NEEDED) and (phase == 1)) then
				if (emit_inspect or not(repairable)) then
					IMPOSSIBLE; stop
				end if;
				repair_state := DONE
			end if;

			if ((repair_state == BUSY) and (phase == 1)) then
				if (emit_inspect or not(repairable)) then
					IMPOSSIBLE; stop
				end if;
				repair_state := DONE
			end if;

			if ((repair_state == DONE) and independent_repair) then
				repair_state := NONE
			end if
		end loop
	end var
	end process
end module
